git remote set-url origin git@github.com:danchurch/getConcsFromUrl.git

## Roo's Brother Marshall has found the url for the concession layer, probably.
## let's confirm.

https://geovisorm.controlrecursosyenergia.gob.ec/arcgis/rest/services/Concesiones/CatastroMineroNacional_PSAD56/MapServer/0

## the fear is that he has an old layer, leftover from the days when they were using the old 
## geovisor app:
https://geo.controlminero.gob.ec:1026/geo_visor/

## but I think he is aware of that old dataset. I guess the only way to check is 
## build up a json by querying the url he found. 

## one query for 1000 random objects that Marshall generated:

https://geovisorm.controlrecursosyenergia.gob.ec/arcgis/rest/services/Concesiones/CatastroMineroNacional_PSAD56/MapServer/0/query?where=0%3D0&outFields=%2A&f=json

https://geovisorm.controlrecursosyenergia.gob.ec/arcgis/rest/services/Concesiones/CatastroMineroNacional_PSAD56/MapServer/0/query?where=0%3D0&outFields=%2A&f=pjson


## to get just ids, would this work?:

python3

import requests, re, json, pprint
import pandas as pd

concIDs = requests.get("https://geovisorm.controlrecursosyenergia.gob.ec/"
"arcgis/rest/services/Concesiones/CatastroMineroNacional_PSAD56/"
"MapServer/0/query?where=0%3D0&outFields=%2A&f=json&returnIdsOnly=true")

## how do use these ids to get us the geometric objects?
## we need to break this up into requests of less than 1000


concIDs.text

type(concIDs.text)

aa = concIDs.text.split(',')
bb = pd.Series(aa)

allIDs = bb.drop([0,1,bb.index[-1]]).reset_index(drop=True)


## can we make a request for just the first ten objects?

cc = allIDs.iloc[0:10].to_string(index=False)
patt = re.compile('\n +')
dd = patt.sub(',', cc).strip()



allIDs.iloc[0:10].values

allIDs.iloc[0:10].to_list()

first1 = requests.get("https://geovisorm.controlrecursosyenergia.gob.ec/"
                       "arcgis/rest/services/Concesiones/CatastroMineroNacional_PSAD56/"
                       "MapServer/0/query?where=0%3D0"
                       "&outFields=%2A&f=json"
                       "&objectIds=10915,140010"
                       "&returnIdsOnly=true"
                      )


## other file formats are mentioned: 
## https://sampleserver1.arcgisonline.com/ArcGIS/SDK/REST/formattypes.html

ids=allIDs[0:3]

ids=dd
aa = requests.get("https://geovisorm.controlrecursosyenergia.gob.ec/"
                       "arcgis/rest/services/Concesiones/CatastroMineroNacional_PSAD56/"
                       "MapServer/0/query?where=0%3D0"
                       "&outFields=%2A&f=json"
                       "&geometryType=esriGeometryPolygon"
                       f"&objectIds={ids}"
                       "&returnIdsOnly=true"
                       "&supportsQueryFormats=true"
                      )

print("https://geovisorm.controlrecursosyenergia.gob.ec/"
                       "arcgis/rest/services/Concesiones/CatastroMineroNacional_PSAD56/"
                       "MapServer/0/query?where=0%3D0"
                       "&outFields=%2A&f=json"
                       "&geometryType=esriGeometryPolygon"
                       f"&objectIds={ids}"
                       "&returnIdsOnly=true"
                       "&supportsQueryFormats=true"
                      )

## try it with kmz:
ids=dd
kmzTest = requests.get("https://geovisorm.controlrecursosyenergia.gob.ec/"
                       "arcgis/rest/services/Concesiones/CatastroMineroNacional_PSAD56/"
                       "MapServer/0/query?where=0%3D0"
                       "&outFields=%2A&f=KMZ"
                       f"&objectIds={ids}"
                       )

with open('test.kmz', 'wb') as kf:
    kf.write(kmzTest.content)

## that didn't work...the file is essentially empty. 

## they also list something about esri shape file format..

ids=dd
kmzTest = requests.get("https://geovisorm.controlrecursosyenergia.gob.ec/"
                       "arcgis/rest/services/Concesiones/CatastroMineroNacional_PSAD56/"
                       "MapServer/0/query?where=0%3D0"
                       "&outFields=%2A&f=kmz"
                       "&geometryType=esriGeometryPolygon"
                       f"&objectIds={ids}"
                       )

with open('test.kmz', 'wb') as kf:
    kf.write(kmzTest.content)

mv test.kmz test.gz
gunzip test.kmz
## this is mostly empty. Why?


ids=dd
esriTest = requests.get("https://geovisorm.controlrecursosyenergia.gob.ec/"
                       "arcgis/rest/services/Concesiones/CatastroMineroNacional_PSAD56/"
                       "MapServer/0/query?where=0%3D0"
                       "&outFields=%2A&f=lyr"
                       f"&objectIds={ids}"
                       )

with open('test.lyr', 'wb') as kf:
    kf.write(esriTest.content)
## nope, format unsupported, request denied


## is the problem simpler when we explicitly request polygons?
ids=dd
test = requests.get("https://geovisorm.controlrecursosyenergia.gob.ec/"
                       "arcgis/rest/services/Concesiones/CatastroMineroNacional_PSAD56/"
                       "MapServer/0/query?where=0%3D0"
                       "&outFields=%2A&f=json"
                       "&geometryType=esriGeometryPolygon"
                       f"&objectIds={ids}"
                      )

## this is so close to a geojson...frustrating...

## maybe it supports geojson?
ids=dd
test = requests.get("https://geovisorm.controlrecursosyenergia.gob.ec/"
                       "arcgis/rest/services/Concesiones/CatastroMineroNacional_PSAD56/"
                       "MapServer/0/query?where=0%3D0"
                       "&outFields=%2A&f=geojson"
                       "&geometryType=esriGeometryPolygon"
                       f"&objectIds={ids}"
                      )
## nope


ids=dd
test = requests.get("https://geovisorm.controlrecursosyenergia.gob.ec/"
                       "arcgis/rest/services/Concesiones/CatastroMineroNacional_PSAD56/"
                       "MapServer/0/query?where=0%3D0"
                       "&outFields=%2A&f=pjson"
                       "&geometryType=esriGeometryPolygon"
                       f"&objectIds={ids}"
                      )
##

test.content

with open('test.json', 'wb') as f:
    f.write(test.content)

## still looks like our best hope is json

ids=dd
test = requests.get("https://geovisorm.controlrecursosyenergia.gob.ec/"
                       "arcgis/rest/services/Concesiones/CatastroMineroNacional_PSAD56/"
                       "MapServer/0/query?where=0%3D0"
                       "&outFields=%2A&f=json"
                       "&geometryType=esriGeometryPolygon"
                       f"&objectIds={ids}"
                      )

##

with open('test.html', 'wb') as f:
    f.write(test.content)
## ## for jsons
## aa = json.loads(first2.text)
## pprint.pprint(aa) ## looks okay
## ## but how to get this to geojson? or anything that our software can use?
## ## their jsons don't look easilt 

## these strings are 8-bit, for accents etc,
## to recover them:
b'PEQUE\xc3\x91A'.decode()

## tonight 

## - break up series into <1000 chunks, 
## - make requests, merge 
## - start github repo, post everything

## okay, start over:


import requests, re, json, pprint
import pandas as pd

concIDs = requests.get("https://geovisorm.controlrecursosyenergia.gob.ec/"
            "arcgis/rest/services/Concesiones/CatastroMineroNacional_PSAD56/"
            "MapServer/0/query?where=0%3D0&outFields=%2A&f=json&returnIdsOnly=true")

aa = concIDs.text.split(',')
bb = pd.Series(aa)
allIDs = bb.drop([0,1,bb.index[-1]]).reset_index(drop=True)
cc = allIDs.iloc[0:10].to_string(index=False) 
patt = re.compile('\n +')
concs2get = patt.sub(',', cc).strip()

test = requests.get("https://geovisorm.controlrecursosyenergia.gob.ec/"
                       "arcgis/rest/services/Concesiones/CatastroMineroNacional_PSAD56/"
                       "MapServer/0/query?where=0%3D0"
                       "&outFields=%2A&f=json"
                       "&geometryType=esriGeometryPolygon"
                       f"&objectIds={concs2get}"
                      )
## that is a successful request, but gives the generic json objects,
## these are great, we can get teh coordinates out of them, but we 
## will have do some not-insignificant data munging to make them work. 

## if we build the html for a query, by viewing the followng in a browser:

https://geovisorm.controlrecursosyenergia.gob.ec/arcgis/rest/services/Concesiones/CatastroMineroNacional_PSAD56/MapServer/0/query

## we can see the list of available file formats:

HTML, JSON, AMF, KMZ

## the kmz is the only explicitly "mapping" file format, 
## but when I request this:

test = requests.get("https://geovisorm.controlrecursosyenergia.gob.ec/"
                       "arcgis/rest/services/Concesiones/CatastroMineroNacional_PSAD56/"
                       "MapServer/0/query?where=0%3D0"
                       "&outFields=%2A"
                       "&f=kmz"
                       "&geometryType=esriGeometryPolygon"
                       f"&objectIds={concs2get}"
                      )


## the result is a titled-but-empty kmz. The uncompressed kml 
## contains no real information:

with open('testKMZ.gz', 'wb') as f:
    f.write(test.content)

## in bash
gunzip testKMZ.gz

## works, so let's go ahead and grab them all while  
## we want to break this up to say 900-member lists

brokenUpIDs = {'0-899':allIDs.iloc[0:900],
      '900-1799':allIDs.iloc[900:1800],
      '1800-2699':allIDs.iloc[1800:2700],
      '2700-3599':allIDs.iloc[2700:3600],
      '3600-4499':allIDs.iloc[3600:4500],
      '4500-5399':allIDs.iloc[4500:5400],
      '5400-6299':allIDs.iloc[5400:6300],
      '6300-7199':allIDs.iloc[6300:7200],
      '7200-end':allIDs.iloc[7200:]}



for i in aa.brokenUpIDs():
    print(aa[i])




def makeConcList(pieceOfRequest):
    clean = pieceOfRequest.to_string(index=False)
    patt = re.compile('\n +')
    concs2get = patt.sub(',', clean).strip()
    return(concs2get)



for i in brokenUpIDs.keys():
    concs2get = makeConcList(brokenUpIDs[i])
    print(f'{i}.json')
    concReq = requests.get("https://geovisorm.controlrecursosyenergia.gob.ec/"
                           "arcgis/rest/services/Concesiones/CatastroMineroNacional_PSAD56/"
                           "MapServer/0/query?where=0%3D0"
                           "&outFields=%2A&f=json"
                           "&geometryType=esriGeometryPolygon"
                           f"&objectIds={concs2get}"
                          )
    with open(f'{i}.json', 'wb') as f:
        f.write(concReq.content)

## for reason, that still times out...why?

grep -o -w "dpa_despro" 900-1799.json | wc -l ## still only 900 geometries...


## start over with 500 geometries per request...

brokenUpIDs500 = {'0-499':allIDs.iloc[0:500],
      '500-999':allIDs.iloc[500:1000],
      '1000-1499':allIDs.iloc[1000:1500],
      '1500-1999':allIDs.iloc[1500:2000],
      '2000-2499':allIDs.iloc[2000:2500],
      '2500-2999':allIDs.iloc[2500:3000],
      '3000-3499':allIDs.iloc[3000:3500],
      '3500-3999':allIDs.iloc[3500:4000],
      '4000-4499':allIDs.iloc[4000:4500],
      '4500-4999':allIDs.iloc[4500:5000],
      '5500-5999':allIDs.iloc[5500:6000],
      '6000-6499':allIDs.iloc[6000:6500],
      '6500-6999':allIDs.iloc[6500:7000],
      '7000-end':allIDs.iloc[7000:]}

for i in brokenUpIDs500.keys():
    concs2get = makeConcList(brokenUpIDs500[i])
    print(f'{i}.json')
    concReq = requests.get("https://geovisorm.controlrecursosyenergia.gob.ec/"
                           "arcgis/rest/services/Concesiones/CatastroMineroNacional_PSAD56/"
                           "MapServer/0/query?where=0%3D0"
                           "&outFields=%2A&f=json"
                           "&geometryType=esriGeometryPolygon"
                           f"&objectIds={concs2get}"
                          )
    with open(f'{i}.json', 'wb') as f:
        f.write(concReq.content)

## that worked better.
## now how to convert these to geojsons...

## can we bring in one of these files and parse it?

aa = json.load(open('0-499.json', 'r'))

aa.keys()

aa['displayFieldName'] ## don't need
aa['fieldAliases'] ## explanation of the field types, don't think we need this?
aa['geometryType'] ## 'esri geometry polygon', as requested, not needed
aa['spatialReference'] 
## {'wkid': 24877, 'latestWkid': 24877}, will need this in the geojson, it's PSAD_1956_UTM_Zone_17S, =  EPSG:24877
aa['fields'] ## explanation of GIS table variable types
aa['features'] ## this is the meat of it, the polygons in the form of esri rings, with their associated table data


pprint.pprint(aa)

## we can write out the whole thing so:
with open('pretty0-499.txt', 'w') as f:
    f.write( pprint.pformat(aa) )

## but we may want to extract just the features
## keep it pretty for the moment, hope this doesn't cause problems?

pprint.pprint(aa['features'] )

with open('pretty0-499_features.txt', 'w') as f:
    f.write( pprint.pformat(aa['features'] ) )



## but for the moment, we probably want to extract the features, and 
## use the rings as polygons in a geojson.
## geojson technically won't take this projection, but I think we 
## can fudge it so qgis and geopandas will accept it. 

## I think we will want to create a feature collection, where each
## concession is a feature, with a geometry type = polygon (maybe multipolygon?), 
## coordinates pulled from the rings object of the original json,
## and the varies table data placed into the properties object

"type": "FeatureCollection",
  "features": [
    {
      "type": "Feature",
      "geometry": {
        "type": "Point",
        "coordinates": [102.0, 0.5]
      },
      "properties": {
        "prop0": "value0"
      }




## I assume we're going to have to build 
## some dictionaries and write them out with the
## json or geojson module
## for one feature from the original json:

oneFeature=aa['features'][0]

## points for geojson need to be (x,y), sometimes these UTM cses don't 
## report that way...

oneFeature['geometry']['rings'][0][0]
## [762500, 9542200] looks right

